# Import essential data for the Accelerator
#
# Includes:
# * Languages
# * Currencies
# * Titles
# * Vendors
# * Warehouses
# * Supported Credit/Debit cards
# * User Groups
# * DistanceUnits for Storelocator
# * MediaFolders
# * MediaFormats                               s
# * Tax & Tax Groups
# * Jobs
#% impex.setLocale(Locale.GERMAN);

# Languages
INSERT_UPDATE Language;isocode[unique=true];fallbackLanguages(isocode);active[default=true]
;en;;;
;de;en;;
;ja;en;;
;zh;en;;

# Currencies
INSERT_UPDATE Currency;isocode[unique=true];conversion;digits;symbol
;GBP;1;2;£
;EUR;1;2;€
;USD;1,4;2;$
;JPY;120;0;¥

# Vendor
INSERT_UPDATE Vendor;code[unique=true];name
;default;Default Vendor

# Disable preview for email pages
UPDATE CMSPageType;code[unique=true];previewDisabled
;EmailPage;true

# Titles
INSERT_UPDATE Title;code[unique=true]
;mr
;mrs
;miss
;ms
;dr
;rev

# Media Folders
INSERT_UPDATE MediaFolder;qualifier[unique=true];path[unique=true]
;images;images
;email-body;email-body
;email-attachments;email-attachments

# Media formats
INSERT_UPDATE MediaFormat;qualifier[unique=true]
;1200Wx1200H
;515Wx515H
;365Wx246H
;300Wx300H
;96Wx96H
;65Wx65H
;30Wx30H
;mobile
;tablet
;desktop
;widescreen

# Tax & Tax Groups
INSERT_UPDATE UserTaxGroup;code[unique=true]
;de-taxes-utg
;jp-taxes-utg
;uk-taxes-utg
;us-taxes-utg
;ca-taxes-utg

INSERT_UPDATE ProductTaxGroup;code[unique=true]
;jp-vat-full-ptg
;eu-vat-full-ptg
;eu-vat-half-ptg
;us-sales-tax-full-ptg
;ca-sales-tax-full-ptg
;uk-vat-full-ptg;


INSERT_UPDATE Tax;code[unique=true];value;currency(isocode)
;de-vat-full-t;19
;de-vat-half-t;7
;jp-vat-full-t;5
;uk-vat-full-t;20
;uk-vat-half-t;5
;us-sales-tax-full-t;0
;ca-sales-tax-full-t;0


# Add User tax group to User group - customergroup
UPDATE Usergroup;uid[unique=true];userTaxGroup(code);
;customergroup;uk-taxes-utg;

INSERT_UPDATE ServicelayerJob;code[unique=true];springId[unique=true]
;cartRemovalJob;cartRemovalJob
;siteMapMediaJob;siteMapMediaJob


# Set search restriction for Consultant on db data sourced pages

#INSERT_UPDATE SearchRestriction		;code[unique=true]				;name[lang=de]				;name[lang=en]				;query																																					;principal(UID)				;restrictedType(code)				;active				;generate
#									;mycountryrestriction			;My country Restriction		;My country Restriction		;EXISTS ({{SELECT 1 FROM {Consultant2CountryRelation as p2c} WHERE {p2c.source} = {item.PK} AND {p2c.target} = ?session.selectConsultantCountryPk}})    ;customergroup				;Consultant							;true				;true


# GOLD
# Deactivate Frontend Restriction on category by default for perfomance purposes
#UPDATE SearchRestriction;code[unique=true];active[default=false]
#;Frontend_RestrictedCategory

INSERT_UPDATE Script  ; scriptType(code)  ; active  ; code[unique=true]     ; version   ; content;
                      ; GROOVY            ; true    ; confirmPickup         ; 0         ; "import de.hybris.platform.basecommerce.enums.ConsignmentStatus; import com.hybris.cockpitng.actions.ActionContext; import com.hybris.cockpitng.actions.ActionResult; import de.hybris.platform.ordersplitting.model.ConsignmentModel; import de.hybris.platform.ordersplitting.model.ConsignmentProcessModel; import de.hybris.platform.processengine.BusinessProcessService; import com.hybris.cockpitng.util.BackofficeSpringUtil; import com.hybris.cockpitng.actions.CockpitAction; import com.hybris.cockpitng.dataaccess.facades.object.ObjectFacade; import com.hybris.cockpitng.dataaccess.facades.object.exceptions.ObjectSavingException;  public class PickupConfirmationAction implements CockpitAction {        public ActionResult perform(final ActionContext ctx)      {         final Object data = ctx.getData();         if(data instanceof ConsignmentModel){             try{                 ((ConsignmentModel)data).setStatus(ConsignmentStatus.PICKUP_COMPLETE);                 getObjectFacade().save(data);                 for (final ConsignmentProcessModel process : ((ConsignmentModel)data).getConsignmentProcesses())                 {                     getBusinessProcessService().triggerEvent(process.getCode() + ""_ConsignmentPickup"");                 }             }             catch(final ObjectSavingException e){                 throw new RuntimeException(e);             };             return new ActionResult(ActionResult.SUCCESS);         };         return new ActionResult(ActionResult.ERROR);     };      public boolean canPerform(final ActionContext ctx)     {         return (ctx.getData() instanceof ConsignmentModel) && ((ConsignmentModel)ctx.getData()).getStatus().equals(ConsignmentStatus.READY_FOR_PICKUP)     };      public boolean needsConfirmation(final ActionContext ctx)     {         return false;     };      public String getConfirmationMessage(final ActionContext ctx)     {         return ""Are you sure?"";     };       public ObjectFacade getObjectFacade(){         return (ObjectFacade) BackofficeSpringUtil.getBean(""objectFacade"");     };       protected BusinessProcessService getBusinessProcessService()     {         return BackofficeSpringUtil.getBean(""businessProcessService"", BusinessProcessService.class);     } }";
                      